# Map Encodings for Braille; stored as length 6 and 12 binary strings
import numpy as np


def create_map():
    map = np.empty((94), dtype=tuple)
    map.fill((None, None))
    map[0] = ("\u0905", "100000")
    map[1] = ("\u0906", "011100")
    map[2] = ("\u0907", "010100")
    map[3] = ("\u0908", "001010")
    map[4] = ("\u0909", "101001")
    map[5] = ("\u090A", "110011")
    map[6] = ("\u090E", "010001")
    map[7] = ("\u090F", "100010")
    map[8] = ("\u0910", "001100")
    map[9] = ("\u0912", "101101")
    map[10] = ("\u0913", "101010")
    map[11] = ("\u0914", "010101")
    map[12] = ("\u090B", "000010111010")
    map[13] = ("\u0960", "000001111010")
    map[14] = ("\u090C", "000010111000")
    map[15] = ("\u0961", "000001111000")

    map[16] = ("\u0915", "101000")
    map[17] = ("\u0916", "000101")
    map[18] = ("\u0917", "110110")
    map[19] = ("\u0918", "110001")
    map[20] = ("\u0919", "001101")
    map[21] = ("\u091A", "100100")
    map[22] = ("\u091B", "100001")
    map[23] = ("\u091C", "010110")
    map[24] = ("\u091D", "001011")

    map[25] = ("\u0020", "000000")

    map[26] = ("\u091E", "010010")
    map[27] = ("\u091F", "011111")
    map[28] = ("\u0920", "010111")
    map[29] = ("\u0921", "110101")
    map[30] = ("\u0922", "111111")
    map[31] = ("\u0923", "001111")
    map[32] = ("\u0924", "011110")
    map[33] = ("\u0925", "100111")
    map[34] = ("\u0926", "100110")
    map[35] = ("\u0927", "011101")
    map[36] = ("\u0928", "101110")
    map[37] = ("\u092A", "111100")
    map[38] = ("\u092B", "011010")
    map[39] = ("\u092C", "110000")
    map[40] = ("\u092D", "000110")
    map[41] = ("\u092E", "101100")
    map[42] = ("\u092F", "101111")
    map[43] = ("\u0930", "111010")
    map[44] = ("\u0932", "111000")
    map[45] = ("\u0933", "000111")
    map[46] = ("\u0935", "111001")
    map[47] = ("\u0936", "100101")
    map[48] = ("\u0937", "111101")
    map[49] = ("\u0938", "011100")
    map[50] = ("\u0939", "110010")

    map[51] = ("DUMMY0", "111110")  # ks
    map[52] = ("DUMMY1", "100011")  # jn

    map[53] = ("\u095C", "110111")
    map[54] = ("\u095D", "000010110111")

    map[55] = ("DUMMY2", "111011")  # weird l thing
    map[56] = ("DUMMY3", "000011")  # werid n thing

    map[57] = ("\u095E", "110100")
    map[58] = ("\u095B", "101011")
    map[59] = ("\u094D", "000100")
    map[60] = ("\u0902", "000011")
    map[61] = ("\u0903", "000001")
    map[62] = ("\u0901", "001000")
    map[63] = ("\u093D", "010000")

    map[64] = ("\u002C", "010000")
    map[65] = ("\u003B", "011000")
    map[66] = ("\u003A", "010010")
    map[67] = ("\u0964", "010011")
    map[68] = ("\u0965", "010011010011")

    # english special characters of no use at all
    map[69] = ("\u0021", "011010")
    map[70] = ("\u003F", "011001")
    map[71] = ("DUMMY4", "001011")
    map[72] = ("\u0029", "011011")
    map[73] = ("\u002D", "001001")
    map[74] = ("\u2013", "001001001001")
    map[75] = ("DUMMY6", "000010")
    map[76] = ("\u002A", "001010001010")
    map[77] = ("DUMMY7", "000101")
    map[78] = ("\u0028", "011011")

    # matras n other stuff
    # map[ 0 ] = ( "\u0905" , "100000" )
    map[79] = ("\u093E", "011100")
    map[80] = ("\u093F", "010100")
    map[81] = ("\u0940", "001010")
    map[82] = ("\u0941", "101001")
    map[83] = ("\u0942", "110011")
    map[84] = ("\u0946", "010001")
    map[85] = ("\u0947", "100010")
    map[86] = ("\u0948", "001100")
    map[87] = ("\u094A", "101101")
    map[88] = ("\u094B", "101010")
    map[89] = ("\u094C", "010101")
    map[90] = ("\u0943", "000010111010")
    map[91] = ("\u0944", "000001111010")
    map[92] = ("\u0962", "000010111000")
    map[93] = ("\u0963", "000001111000")

    bbmap = dict(map)
    return bbmap


def bin2braille(s):
    k = hex(int(s[::-1], 2))[2:4]
    l = hex(10240)
    b = ""
    if len(k) == 2:
        b += l[0:4]+k
        return int(b, 16)
    else:
        b += l[0:5]+k
        return int(b, 16)


def binstrbraille(s):
    l = ""
    l1 = s
    for i in range(len(s)//6):
        l += chr(bin2braille(l1[6*i:6*i+6]))
    return l


def get_braille(s):
    bbmap = create_map()
    k = len(s)
    text = ""
    for i in range(k):
        if (s[i] not in bbmap.keys()):
            text += binstrbraille('000000')
        else:
            text += binstrbraille(bbmap[s[i]])
    return text
